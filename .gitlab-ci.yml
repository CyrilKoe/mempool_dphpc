# Copyright 2020 ETH Zurich and University of Bologna.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Samuel Riedel, ETH Zurich

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ROOT_DIR: '$CI_PROJECT_DIR'
  APPS: "tests"
  RUST_LOG: 'memora=debug'
  PATH: '/home/gitlabci/.cargo/bin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/usr/local/condor/bin:/usr/sepp/bin'

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_NAME

before_script:
  - env

stages:
  - build
  - compiler
  - test

tc-gcc:
  stage: build
  script:
    - git submodule update --init --recursive -- toolchain/riscv-gnu-toolchain
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-riscv-gcc; then
        make tc-riscv-gcc
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-riscv-gcc
      fi
  variables:
    GIT_SUBMODULE_STRATEGY: none

tc-llvm:
  stage: build
  script:
    - git submodule update --init --recursive -- toolchain/llvm-project
    - make tc-llvm
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    paths:
      - install/llvm
    expire_in: 1 day

tc-isa-sim:
  stage: build
  script:
    - rm -rf toolchain/riscv-isa-sim
    - git submodule update --init --recursive -- toolchain/riscv-isa-sim
    - git submodule foreach --recursive git reset --hard
    - make riscv-isa-sim
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    paths:
      - install/riscv-isa-sim
    expire_in: 1 day

halide:
  stage: compiler
  script:
    - git submodule update --init --recursive -- toolchain/halide
    - make halide
  artifacts:
    paths:
      - install/halide
    expire_in: 1 day
  variables:
    GIT_SUBMODULE_STRATEGY: none
  needs: ["tc-llvm"]
  dependencies:
    - tc-llvm

hardware:
  stage: test
  script:
    - make -C hardware
  variables:
    GIT_SUBMODULE_STRATEGY: none
  needs: []
  dependencies: []

# Software tests
.apps: &apps-compiler
  stage: test
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-riscv-gcc
    - cd apps
    - |
      for APP in ${APPS}; do
        make COMPILER=${COMPILER} bin/${APP}
      done
    - cd ../hardware
    - |
      for APP in ${APPS}; do
        app=${APP} make simc
      done
  artifacts:
    paths:
      - hardware/build/transcript
      - hardware/build/trace_hart_*.trace
      - hardware/results

apps-llvm:
  <<: *apps-compiler
  variables:
    GIT_SUBMODULE_STRATEGY: none
    COMPILER: "llvm"
  needs: ["tc-gcc","tc-isa-sim","tc-llvm"]
  dependencies:
    - tc-gcc
    - tc-isa-sim
    - tc-llvm

apps-gcc:
  <<: *apps-compiler
  variables:
    GIT_SUBMODULE_STRATEGY: none
    COMPILER: "gcc"
  needs: ["tc-gcc","tc-isa-sim"]
  dependencies:
    - tc-gcc
    - tc-isa-sim

# Code style test
code-style:
  stage: test
  script:
    - ./.gitlab-ci.d/lint.sh
  needs: ["tc-llvm"]
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      allow_failure: false
    - if: '$CI_MERGE_REQUEST_ID == null'
      allow_failure: true
