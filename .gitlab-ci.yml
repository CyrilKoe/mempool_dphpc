# Copyright 2020 ETH Zurich and University of Bologna.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Samuel Riedel, ETH Zurich

variables:
  GIT_SUBMODULE_STRATEGY: none
  ROOT_DIR: '$CI_PROJECT_DIR'
  APPS: "tests"
  RUST_LOG: 'memora=debug'
  VERILATOR_ROOT: '$CI_PROJECT_DIR/install/verilator'
  PATH: '/home/gitlabci/.cargo/bin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/usr/local/condor/bin:/usr/sepp/bin:$VERILATOR_ROOT/bin'
  OBJCACHE: ''
  RISCV_WARNINGS: '-Werror'

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_NAME

before_script:
  - env

stages:
  - tools
  - build
  - test

tc-gcc:
  stage: tools
  script:
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-riscv-gcc; then
        git submodule update --init --recursive -- toolchain/riscv-gnu-toolchain
        make tc-riscv-gcc
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-riscv-gcc
      fi

tc-llvm:
  stage: tools
  script:
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-llvm; then
        git submodule update --init --recursive -- toolchain/llvm-project
        make tc-llvm
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-llvm
      fi

riscv-isa-sim:
  stage: tools
  script:
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup riscv-isa-sim; then
        git submodule update --init --recursive -- toolchain/riscv-isa-sim
        make riscv-isa-sim
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert riscv-isa-sim
      fi

verilator:
  stage: tools
  script:
    # The CI's ccache directory is very limited in size, so let's disable it.
    # Verilator requires a more recent version of python than the default one.
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup verilator; then
        git submodule update --init --recursive -- toolchain/verilator
        export PYTHON3=$(which python3-3.6.5)
        export VERILATOR_CI="--disable-defenv"
        make verilator
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert verilator
      fi

halide:
  stage: build
  script:
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup halide; then
        # Download LLVM
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
        # Build Halide
        git submodule update --init --recursive -- toolchain/halide
        make halide
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert halide
      fi
  needs: ["tc-llvm"]

verilator_model:
  stage: build
  script:
    - |
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup verilator_model; then
        # Download Verilator and add missing links
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get verilator
        ln -s $VERILATOR_ROOT/share/verilator/include $VERILATOR_ROOT/include
        ln -s $VERILATOR_ROOT/share/verilator/bin/verilator_includer $VERILATOR_ROOT/bin/verilator_includer
        # Build the verilator model
        make -C hardware $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert verilator_model
      fi
  variables:
    num_cores: "16"
  needs: ["verilator"]

hardware:
  stage: test
  script:
    # Don't regenerate the bootrom, we just want to see if the HW compiles
    - touch apps/common/bootrom.img
    - touch hardware/src/bootrom.sv
    - make -C hardware compile
  needs: []

# Software tests
.apps: &apps-job-anchor
  stage: test
  artifacts:
    paths:
      - hardware/build/transcript
      - hardware/build/trace_hart_*.trace
      - hardware/results

.apps-script:
  script: &apps-script-anchor
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get riscv-isa-sim
    - cd apps
    - make COMPILER=${COMPILER} all
    - cd ../hardware
    - |
      for APP in ${APPS}; do
        app=${APP} make simc
      done

apps-llvm:
  <<: *apps-job-anchor
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - *apps-script-anchor
  variables:
    COMPILER: "llvm"
  needs: ["tc-gcc","riscv-isa-sim","tc-llvm"]

apps-gcc:
  <<: *apps-job-anchor
  script:
    - *apps-script-anchor
  variables:
    COMPILER: "gcc"
  needs: ["tc-gcc","riscv-isa-sim"]

# Unit tests
unit-tests:
  stage: test
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get riscv-isa-sim
    - make test
  variables:
    COMPILER: "gcc"
  needs: ["tc-gcc","riscv-isa-sim"]
  artifacts:
    paths:
      - apps/riscv-tests/isa/*.dump
      - apps/riscv-tests/isa/*.out32
      - apps/bin/*.dump
      - hardware/build/transcript
      - hardware/results

# Verilator test
verilator-tests:
  stage: test
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get verilator_model
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-riscv-gcc
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get riscv-isa-sim
    - cd apps
    - |
      for APP in ${APPS}; do
        make COMPILER=${COMPILER} bin/${APP}
      done
    - cd ../hardware
    - |
      for APP in ${APPS}; do
        touch $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator.mk
        touch $ROOT_DIR/hardware/verilator_build/Vmempool_tb_verilator
        app=${APP} make verilate
      done
  variables:
    num_cores: "16"
  needs: ["tc-gcc","riscv-isa-sim","tc-llvm","verilator_model"]

# Code style test
code-style:
  stage: test
  script:
    # Download LLVM
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - ./.gitlab-ci.d/lint.sh
  needs: ["tc-llvm"]
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      allow_failure: false
    - if: '$CI_MERGE_REQUEST_ID == null'
      allow_failure: true
